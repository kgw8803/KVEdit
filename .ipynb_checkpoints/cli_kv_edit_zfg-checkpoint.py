# -*- coding: utf-8 -*-
"""cli_kv_edit_zfg.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Ns3znsbWe1CYKBBO7dbst4Sk1q5nyYRY
"""

import argparse
import os
import torch
from PIL import Image
from torchvision import transforms
from utils.kvedit_runner import run_edit_from_latent, SamplingOptions

def load_mask(mask_path, device="cuda"):
    mask = Image.open(mask_path).convert("L").resize((64, 64))  # latent 크기에 맞춤
    mask = transforms.ToTensor()(mask).unsqueeze(0).to(device)
    return (mask > 0.5).to(torch.bool)

def preprocess_image(image_path):
    image = Image.open(image_path).convert("RGB").resize((512, 512))
    image = transforms.ToTensor()(image) * 2 - 1
    return image.unsqueeze(0)

if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    parser.add_argument("--input_image", type=str, required=True)
    parser.add_argument("--mask_image", type=str, required=True)
    parser.add_argument("--target_latent", type=str, required=True)
    parser.add_argument("--output_dir", type=str, default="results_zfg")
    parser.add_argument("--source_prompt", type=str, required=True)
    parser.add_argument("--target_prompt", type=str, required=True)
    parser.add_argument("--name", type=str, default="flux-dev")
    parser.add_argument("--device", type=str, default="cuda")
    parser.add_argument("--re_init", action="store_true")
    parser.add_argument("--attn_mask", action="store_true")

    # Sampling options
    parser.add_argument("--inversion_num_steps", type=int, default=28)
    parser.add_argument("--denoise_num_steps", type=int, default=28)
    parser.add_argument("--skip_step", type=int, default=4)
    parser.add_argument("--inversion_guidance", type=float, default=1.5)
    parser.add_argument("--denoise_guidance", type=float, default=5.5)
    parser.add_argument("--attn_scale", type=float, default=1.0)
    parser.add_argument("--height", type=int, default=512)
    parser.add_argument("--width", type=int, default=512)

    args = parser.parse_args()
    os.makedirs(args.output_dir, exist_ok=True)

    opts = SamplingOptions(
        source_prompt=args.source_prompt,
        target_prompt=args.target_prompt,
        inversion_num_steps=args.inversion_num_steps,
        denoise_num_steps=args.denoise_num_steps,
        skip_step=args.skip_step,
        inversion_guidance=args.inversion_guidance,
        denoise_guidance=args.denoise_guidance,
        attn_mask=args.attn_mask,
        attn_scale=args.attn_scale,
        seed=0,
        height=args.height,
        width=args.width,
        re_init=args.re_init
    )

    output_path = os.path.join(args.output_dir, "edited.jpg")

    run_edit_from_latent(
        src_image_path=args.input_image,
        z_fg_path=args.target_latent,
        mask_path=args.mask_image,
        opts=opts,
        save_path=output_path,
        device=args.device,
        model_name=args.name,
        t_step=0
    )